double.sample <- function (x) {
test_first_sample <- t.test(x)
p <- test_first_sample$p.value
return(p)
}
sample <- rnorm(30)
double.sample(sample)
num_sim_v2 <- 10000 # creates a vector with number of t-tests to be run
p_values_v2 <- rep(NA, num_sim_v2)
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
while(p_value_v2 > .05 & p_value_v2 < .25) {
p_value_v2 <- double.sample(sample)
}
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
num_sim_v2 <- 10000 # creates a vector with number of t-tests to be run
p_values_v2 <- rep(NA, num_sim_v2)
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
while(p > .05 & p < .25) {
p <- double.sample(sample)
}
p_values_v2[i] <- p
}
double.sample <- function (x) {
sample <- x + rnorm(30)
t_test_1 <- t.test(sample)
p <- t_test_1$p.value
return(p)
}
for (i in 1:num_sim_v2) {
sample <- 0
while(p_value_v2 > .05 & p_value_v2 < .25) {
p_value_v2 <- double.sample(sample)
}
p_values_v2[i] <- p_value_v2
}
num_sim_v2 <- 10000
p_values_v2 <- rep(NA, num_sim_v2)
double.sample <- function (x) {
sample <- x + rnorm(30)
t_test_1 <- t.test(sample)
p <- t_test_1$p.value
return(p)
}
for (i in 1:num_sim_v2) {
sample <- 0
while(p_value_v2 > .05 & p_value_v2 < .25) {
p_value_v2 <- double.sample(sample)
}
p_values_v2[i] <- p_value_v2
}
for (i in 1:num_sim_v2) {
sample <- 0
while(p_value_v2 > .05 & p_value_v2 < .25) {
p_value_v2 <- double.sample(sample)
}
p_values_v2[i] <- p_value_v2
}
for (i in 1:num_sim_v2) {
sample <- 0
while(p > .05 & p < .25) {
p_value_v2 <- double.sample(sample)
}
p_values_v2[i] <- p_value_v2
}
double.sample <- function (x) {
sample <- x + rnorm(30)
t_test_1 <- t.test(sample)
p <- t_test_1$p.value
return(p)
return(sample)
}
sample <- 0
double.sample(0)
double.sample <- function (x) {
sample <- x + rnorm(30)
t_test_1 <- t.test(sample)
p <- t_test_1$p.value
data <- c(sample, p)
}
sample <- 0
double.sample(0)
dud <- double.sample(0)
double.sample <- function (x) {
sample <- x + rnorm(30)
t_test_1 <- t.test(sample)
p <- t_test_1$p.value
data <- c(sample, p)
}
sample <- 0
dud <- double.sample(0)
View(dud)
double.sample <- function (x) {
while(p_value_a > .05 & p_value_a < .25) {
sample <- sample + rnorm(30)
t_test_a <- t_test(sample)
p_value_a <- t_test_a$p.value
}
return(p_value_a)
}
for (i in 1:num_sim_v2) {
sample <- 0
while(p_value_v2 > .05 & p_value_v2 < .25) {
p_value_v2 <- double.sample(sample)
}
p_values_v2[i] <- p_value_v2
}
for (i in 1:num_sim_v2) {
sample <- 0
while(p_value_v2 > .05 & p_value_v2 < .25) {
p_value_v2 <- double.sample(sample)
return(p_value_v2)
}
p_values_v2[i] <- p_value_v2
}
for (i in 1:num_sim_v2) {
sample <- 0
while(p > .05 & p < .25) {
p <- double.sample(sample)
}
return(p)
p_values_v2[i] <- p
}
num_sim_v2 <- 10000 # creates a vector with number of t-tests to be run
p_values_v2 <- rep(NA, num_sim_v2)
for (i in 1:num_sim_v2) {
sample <- 0
while(p > .05 & p < .25) {
p <- double.sample(sample)
return(p)
}
p_values_v2[i] <- p
}
for (i in 1:num_sim_v2) {
sample <- 0
while(p > .05 & p < .25) {
p <- double.sample(sample)
print(p)
}
p_values_v2[i] <- p
}
for (i in 1:num_sim_v2) {
sample <- 0
p <- 0
while(p > .05 & p < .25) {
p <- double.sample(sample)
print(p)
}
p_values_v2[i] <- p
}
p <- 0
for (i in 1:num_sim_v2) {
sample <- 0
while(p > .05 & p < .25) {
p <- double.sample(sample)
print(p)
}
p_values_v2[i] <- p
}
for (i in 1:num_sim_v2) {
sample <- 0
p <- 0
while(p > .05 & p < .25) {
p <- double.sample(sample)
print(p)
}
p_values_v2[i] <- p
}
double.sample <- function (x) {
while(p_value_a > .05 & p_value_a < .25) {
sample <- sample + rnorm(30)
t_test_a <- t_test(sample)
p_value_a <- t_test_a$p.value
}
return(p_value_a)
return(sample)
}
for (i in 1:num_sim_v2) {
sample <- 0
p <- 0
while(p > .05 & p < .25) {
list(sample, p) <- double.sample(sample)
}
p_values_v2[i] <- p
}
sample <- 0
p <- 0
dud <- list(sample, p)
View(dud)
double.sample <- function (x) {
while(p_value_a > .05 & p_value_a < .25) {
sample <- sample + rnorm(30)
t_test_a <- t_test(sample)
p_value_a <- t_test_a$p.value
}
return(p_value_a)
}
double.sample <- function (x) {
while(p_value_a > .05 & p_value_a < .25) {
sample <- sample + rnorm(30)
t_test_a <- t_test(sample)
p_value_a <- t_test_a$p.value
}
return(p_value_a)
}
for (i in 1:num_sim_v2) {
sample <- 0
p <- 0
p <- while(p > .05 & p < .25) {
p <- double.sample(sample)
}
p_values_v2[i] <- p
}
for (i in 1:num_sim_v2) {
sample <- 0
p <- 0
while(p > .05 & p < .25) {
p <- double.sample(sample)
}
return(p)
p_values_v2[i] <- p
}
for (i in 1:num_sim_v2) {
sample <- 0
while(p > .05 & p < .25) {
p <- double.sample(sample)
}
return(p)
p_values_v2[i] <- p
}
for (i in 1:num_sim_v2) {
sample <- 0
p <- 0
while(p > .05 & p < .25) {
p <- double.sample(sample)
}}
double.sample(sample)
sample <- 0
double.sample(sample)
double.sample <- function (x) {
p_value_a <- 0
while(p_value_a > .05 & p_value_a < .25) {
sample <- sample + rnorm(30)
t_test_a <- t_test(sample)
p_value_a <- t_test_a$p.value
}
return(p_value_a)
}
double.sample(sample)
double.sample(sample)
double.sample <- function (x) {
sample <- sample + rnorm(30)
print(sample)
}
sample <- 0
double.sample(sample)
double.sample <- function (x) {
test_first_sample <- t.test(x)
p_value_final <- test_first_sample$p.value
if(p_value_final < .25 & p_value_final > .05){
second_sample <- x + rnorm(30)
test_second_sample <- t.test(second_sample)
p_value_final <- test_second_sample$p.value
} else {return(p_value_final)}
}
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
p <- 0
while(p > .05 & p < .25) {
p <- double.sample(sample)
}
p_values_v2[i] <- p
}
double.sample <- function (x) {
test_first_sample <- t.test(x)
p_value_final <- test_first_sample$p.value
if(p_value_final < .25 & p_value_final > .05){
second_sample <- x + rnorm(30)
test_second_sample <- t.test(second_sample)
p_value_final <- test_second_sample$p.value
} else {return(p_value_final)}
}
num_sim_v2 <- 10000
p_values_v2 <- rep(NA, num_sim_v2)
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
p <- 0
while(p > .05 & p < .25) {
p <- double.sample(sample)
}
p_values_v2[i] <- p
}
double.sample <- function (x) {
test_first_sample <- t.test(x)
p_value_final <- test_first_sample$p.value
if(p_value_final < .25 & p_value_final > .05){
second_sample <- x + rnorm(30)
test_second_sample <- t.test(second_sample)
p_value_final <- test_second_sample$p.value
} else {return(p_value_final)}
}
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
p <- 0
while(p > .05 & p < .25) {
sample <- sample + rnorm(30)
p <- double.sample(sample)
}
p_values_v2[i] <- p
}
sample <- rnorm(30)
p <- 0
for (i in 1:num_sim_v2) {
while(p > .05 & p < .25) {
sample <- sample + rnorm(30)
p <- double.sample(sample)
}
p_values_v2[i] <- p
}
double.sample <- function (x) {
test_first_sample <- t.test(x)
p_value_final <- test_first_sample$p.value
while (p_value_final > .05 & p_value_final < .25) {
x <- x + rnorm(30)
test_second_sample <- t.test(x)
p_value_final <- test_second_sample$p.value}
return(p_value_final)
}
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
p_value_v2 <- double.sample(sample)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
p_value_v2 <- double.sample(sample)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
p_value_v2 <- double.sample(sample)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
?value
dud <- rnorm(30) + rnorm(30)
dud
dud <- (rnorm(30) + rnorm(30))
sample <- rnorm(30)
dud <- sample + rnorm(30)
sample <- rnorm(30)
dud <- c(sample + rnorm(30))
dud
sample <- rnorm(30)
dud <- rbind(sample + rnorm(30))
View(dud)
sample <- rnorm(30)
dud <- append(sample, rnorm(30))
dud
sample_1 <- rnorm(30)
rnorm(length[sample_1])
sample_1 <- rnorm(30)
rnorm((length[sample_1])
sample_1 <- rnorm(30)
length[sample_1]
length['sample_1']
sample_1[,2:length(sample_1)]
sample_1[,1:length(sample_1)]
sample_1[1, :length(sample_1)]
dud <- nrow(sample_1)
double.sample <- function (x) {
sample_1 <- rnorm(x)
test_first_sample <- t.test(sample_1)
p_value_final <- test_first_sample$p.value
while (p_value_final > .05 & p_value_final < .25) {
sample_2 <- append(sample_1, rnorm(x))
test_second_sample <- t.test(sample_2)
p_value_final <- test_second_sample$p.value
sample_1 <- sample_2
x <- length(sample_1)
}
return(p_value_final)
}
x <- 30
double.sample(30)
x <- 30
double.sample(30)
x <- 30
double.sample(30)
x <- 30
double.sample(30)
x <- 30
double.sample(30)
x <- 30
double.sample(30)
x <- 30
double.sample(30)
for (i in 1:num_sim_v2) {
x <- 30
p_value_v2 <- double.sample(x)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
for (i in 1:num_sim_v2) {
x <- 30
p_value_v2 <- double.sample(x)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
for (i in 1:num_sim_v2) {
x <- 30
p_value_v2 <- double.sample(x)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
for (i in 1:num_sim_v2) {
x <- 30
p_value_v2 <- double.sample(x)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
for (i in 1:num_sim_v2) {
x <- 30
p_value_v2 <- double.sample(x)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
for (i in 1:num_sim_v2) {
x <- 30
p_value_v2 <- double.sample(x)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
list <- c(.5, .75, 1) # create list of p-values
double_sample_v2 <- function (x, p) {
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_final <- test_sample_1$p.value
while (p_value_final > .05 & p_value_final < .p) {
sample_2 <- append(sample_1, rnorm(x))
test_second_sample <- t.test(sample_2)
p_value_final <- test_second_sample$p.value
sample_1 <- sample_2
x <- length(sample_1)
}
return(p_value_final)
}
x <- 30
p_values_all <- replicate(10000, sapply(list, double_sample_v2, x=x))
list <- c(.5, .75, 1) # create list of p-values
p <- list
x <- 30
p_values_all <- replicate(10000, sapply(list, double_sample_v2, x=x))
list <- c(.5, .75, 1) # create list of p-values
list <- c(.5, .75, 1) # create list of p-values
double_sample_v2 <- function (p, x) { # fixed maybe?
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_final <- test_sample_1$p.value
while (p_value_final > .05 & p_value_final < .p) {
sample_2 <- append(sample_1, rnorm(x))
test_second_sample <- t.test(sample_2)
p_value_final <- test_second_sample$p.value
sample_1 <- sample_2
x <- length(sample_1)
}
return(p_value_final)
}
x <- 30
p_values_all <- replicate(10000, sapply(list, double_sample_v2, x=x))
double_sample_v2 <- function (p, x) { # fixed maybe?
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_final <- test_sample_1$p.value
while (p_value_final > .05 & p_value_final < p) {
sample_2 <- append(sample_1, rnorm(x))
test_second_sample <- t.test(sample_2)
p_value_final <- test_second_sample$p.value
sample_1 <- sample_2
x <- length(sample_1)
}
return(p_value_final)
}
x <- 30
p_values_all <- replicate(10000, sapply(list, double_sample_v2, x=x))
p_values_all <- replicate(10000, sapply(list, double_sample_v2, x=x))
p_values_all <- replicate(10000, sapply(list, double_sample_v2, x=x))

p_values_v2 <- rep(NA, num_sim_v2)
for (i in 1:num_sim_v2) {
double.sample()
p_values_v2[i] <- p_value_final
}
double.sample()
p_value_final
double.sample <- function () {
first_sample <- rnorm(30)
test_first_sample <- t.test(first_sample)
p_value_final <- test_first_sample$p.value
if(p_value_final < .25 & p_value_final > .05){
second_sample <- first_sample + rnorm(30)
test_second_sample <- t.test(second_sample)
p_value_final <- test_second_sample$p.value
}
}
View(double.sample())
double.sample <- function (x) {
test_first_sample <- t.test(x)
p_value_final <- test_first_sample$p.value
if(p_value_final < .25 & p_value_final > .05){
second_sample <- first_sample + rnorm(30)
test_second_sample <- t.test(second_sample)
p_value_final <- test_second_sample$p.value
}
}
double.sample <- function (x) {
test_first_sample <- t.test(x)
p_value_final <- test_first_sample$p.value
if(p_value_final < .25 & p_value_final > .05){
second_sample <- x + rnorm(30)
test_second_sample <- t.test(second_sample)
p_value_final <- test_second_sample$p.value
}
}
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
double.sample(sample)
p_values_v2[i] <- p_value_final
}
double.sample(sample)
double.sample <- function (x) {
test_first_sample <- t.test(x)
p_value_final <- test_first_sample$p.value
if(p_value_final < .25 & p_value_final > .05){
second_sample <- x + rnorm(30)
test_second_sample <- t.test(second_sample)
p_value_final <- test_second_sample$p.value
}
}
sample <- rnorm(30)
double.sample(sample)
print(p_value_final)
double.sample <- function (x) {
test_first_sample <- t.test(x)
p_value_final <- test_first_sample$p.value
if(p_value_final < .25 & p_value_final > .05){
second_sample <- x + rnorm(30)
test_second_sample <- t.test(second_sample)
p_value_final <- test_second_sample$p.value
}
return(p_value_final)
}
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
double.sample(sample)
p_values_v2[i] <- p_value_final
}
sample <- rnorm(30)
double.sample(sample)
dud <- double.sample(sample)
View(dud)
sample <- rnorm(30)
dud <- double.sample(sample)
num_sim_v2 <- 10000 # creates a vector with number of t-tests to be run
p_values_v2 <- rep(NA, num_sim_v2)
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
p_value_v2 <- double.sample(sample)
p_values_v2[i] <- p_value_v2
}
p_values_v2
p_values_lt05_v2 <- p_values_v2 < 0.05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000
print(proportion_05_v2) # prints the result
double.sample_v2 <- function (p) {
sample_1 <- rnorm(30)
test_sample_1 <- t.test(sample_1)
p_value_1 <- test_sample_1$p.value
if(p_value_1 < p & p_value_1 > .05){
sample_2 <- sample_1 + rnorm(30)
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
}
return(p_value_final)
}
double.sample <- function (x) {
test_first_sample <- t.test(x)
p_value_final <- test_first_sample$p.value
if(p_value_final < .25 & p_value_final > .05){
second_sample <- x + rnorm(30)
test_second_sample <- t.test(second_sample)
p_value_final <- test_second_sample$p.value
}
return(p_value_final)
}
num_sim_v2 <- 10000 # creates a vector with number of t-tests to be run
p_values_v2 <- rep(NA, num_sim_v2) # creates a placeholder vector (where the output of the loop will be saved) with 10000 'NA' values
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
p_value_v2 <- double.sample(sample)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
double.sample <- function (x) {
test_first_sample <- t.test(x)
p_value_final <- test_first_sample$p.value
if(p_value_final < .25 & p_value_final > .05){
second_sample <- x + rnorm(30)
test_second_sample <- t.test(second_sample)
p_value_final <- test_second_sample$p.value
}
return(p_value_final)
}
num_sim_v2 <- 10000 # creates a vector with number of t-tests to be run
p_values_v2 <- rep(NA, num_sim_v2) # creates a placeholder vector (where the output of the loop will be saved) with 10000 'NA' values
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
p_value_v2 <- double.sample(sample)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
double.sample <- function (x) {
test_first_sample <- t.test(x)
p_value_final <- test_first_sample$p.value
if(p_value_final < .25 & p_value_final > .05){
second_sample <- x + rnorm(30)
test_second_sample <- t.test(second_sample)
p_value_final <- test_second_sample$p.value
}
return(p_value_final)
}
num_sim_v2 <- 10000 # creates a vector with number of t-tests to be run
p_values_v2 <- rep(NA, num_sim_v2) # creates a placeholder vector (where the output of the loop will be saved) with 10000 'NA' values
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
p_value_v2 <- double.sample(sample)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
double.sample <- function (x) {
test_first_sample <- t.test(x)
p_value_final <- test_first_sample$p.value
if(p_value_final < .25 & p_value_final > .05){
second_sample <- x + rnorm(30)
test_second_sample <- t.test(second_sample)
p_value_final <- test_second_sample$p.value
}
return(p_value_final)
}
num_sim_v2 <- 10000 # creates a vector with number of t-tests to be run
p_values_v2 <- rep(NA, num_sim_v2) # creates a placeholder vector (where the output of the loop will be saved) with 10000 'NA' values
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
p_value_v2 <- double.sample(sample)
p_values_v2[i] <- p_value_v2
}
p_values_lt05_v2 <- p_values_v2 < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_v2 <- sum(p_values_lt05_v2 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_v2) # prints the result
p_values_rep <- replicate(10000, t.test(rnorm(30))$p.value) # creates a vector containing the p-values from 10000 t-tests run on samples of n = 30 observations, randomly generated from the normal distribution
p_values_rep_lt05 <- p_values < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
rep_proportion_05 <- sum(p_values_rep_lt05 == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(rep_proportion_05) # prints the result
list <- c(.5, .75, 1) # create list of p-values
View(list)
double_sample_v2 <- function (p) {
sample_1 <- rnorm(30)
test_sample_1 <- t.test(sample_1)
p_value_1 <- test_sample_1$p.value
if(p_value_1 < p & p_value_1 > .05){
sample_2 <- sample_1 + rnorm(30)
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
}
return(p_value_final)
}
lapply(list, double_sample_v2)
p_value_v2 <- double.sample(sample)
p_value_v2
sample <- rnorm(30)
p_value_v2 <- double.sample(sample)
p_value_v2
double_sample_v2 <- function (x, p) {
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_1 <- test_sample_1$p.value
if(p_value_1 < p & p_value_1 > .05){
sample_2 <- sample_1 + rnorm(x)
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
}
return(p_value_final)
}
?lapply
double_sample_v2 <- function (x, p) {
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_1 <- test_sample_1$p.value
if(p_value_1 < p & p_value_1 > .05){
sample_2 <- sample_1 + rnorm(x)
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
}
return(p_value_final)
}
x <- 30
sapply(list, double_sample_v2. x=x)
double_sample_v2 <- function (x, p) {
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_1 <- test_sample_1$p.value
if(p_value_1 < p & p_value_1 > .05){
sample_2 <- sample_1 + rnorm(x)
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
}
return(p_value_final)
}
x <- 30
sapply(list, double_sample_v2, x=x)
double_sample_v2 <- function (x, p) {
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_final <- test_sample_1$p.value
if(p_value_final < p & p_value_final > .05){
sample_2 <- sample_1 + rnorm(x)
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
}
return(p_value_final)
}
x <- 30
sapply(list, double_sample_v2, x=x)
double_sample_v2 <- function (x, p) {
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_final <- test_sample_1$p.value
if(p_value_final < p & p_value_final > .05){
sample_2 <- sample_1 + rnorm(x)
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
}
return(p_value_final)
}
x <- 30
sapply(list, double_sample_v2, x=x)
replicate(10000, sapply(list, double_sample_v2, x=x))
?do.call
?rlply
list <- c(.5, .75, 1) # create list of p-values
double_sample_v2 <- function (x, p) {
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_final <- test_sample_1$p.value
if(p_value_final < p & p_value_final > .05){
sample_2 <- sample_1 + rnorm(x)
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
}
return(p_value_final)
}
x <- 30
dud <- sapply(list, double_sample_v2, x=x))
list <- c(.5, .75, 1) # create list of p-values
double_sample_v2 <- function (x, p) {
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_final <- test_sample_1$p.value
if(p_value_final < p & p_value_final > .05){
sample_2 <- sample_1 + rnorm(x)
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
}
return(p_value_final)
}
x <- 30
dud <- sapply(list, double_sample_v2, x=x)
View(dud)
list <- (a =.5, b = .75, c = 1) # create list of p-values
list <- list(a =.5, b = .75, c = 1) # create list of p-values
double_sample_v2 <- function (x, p) {
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_final <- test_sample_1$p.value
if(p_value_final < p & p_value_final > .05){
sample_2 <- sample_1 + rnorm(x)
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
}
return(p_value_final)
}
x <- 30
dud <- replicate(10000, sapply(list, double_sample_v2, x=x)
double_sample_v2 <- function (x, p) {
list <- c(.5, .75, 1) # create list of p-values
double_sample_v2 <- function (x, p) {
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_final <- test_sample_1$p.value
if(p_value_final < p & p_value_final > .05){
sample_2 <- sample_1 + rnorm(x)
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
}
return(p_value_final)
}
x <- 30
dud <- replicate(10000, sapply(list, double_sample_v2, x=x))
View(dud)
p_values_all <- replicate(10000, sapply(list, double_sample_v2, x=x))
p_values_all <- p_values_all %>% pivot_longer(
names_to = "Iteration",
values_to = "p-value",
names_prefix = "V"
)
p_values_all <- p_values_all %>%
pivot_longer(p_values_all,
names_to = "Iteration",
values_to = "p-value",
names_prefix = "V"
)
p_values_all <- p_values_all %>%
pivot_longer(
cols = 1:10000,
names_to = "Iteration",
values_to = "p-value",
names_prefix = "V"
)
p_values_all <- p_values_all %>%
pivot_longer(
cols = 1:10000,
names_to = "Iteration",
values_to = "p-value",
)
p_values_all_df <- as.data.frame(t(p_values_all), row.names = c(.5, .75, 1))
p_values_all_df
View(p_values_all_df)
View(p_values_all_df)
p_values_all_df <- as.data.frame(p_values_all)
p_values_all_df
p_values_all_df <- as.data.frame(p_values_all, stringsAsFactors = FALSE)
p_values_all_df <- map_df(p_values, as.numeric)
View(p_values_all_df)
p_values_all_df <- as_tibble(p_values_all)
View(p_values_all_df)
p_values_all_df <- as.data.frame(p_values_all(unlist(p_values_all), nrow = 3))
p_values_all_df <- as.data.frame(matrix(unlist(p_values_all), nrow = 3))
View(p_values_all_df)
melt(p_values_all_df)
library(reshape2)
melt(p_values_all_df)
p_values_all_df <- melt(p_values_all)
p_values_all_df <- as.data.frame(matrix(unlist(p_values_all), nrow = 3))
p_values_all_df <- as_tibble(p_values, rownames = NULL)
p_values_all_df
p_values_all_df <- as_tibble(p_values)
p_values_all_df
p_values_all_df <- setNames(melt(p_values_all), c(".5, .75, 1"))
View(p_values_all_df)
p_values_all_df <- setNames(melt(p_values_all), c(".5",".75," "1"))
p_values_all_df <- setNames(melt(p_values_all), c(".5",".75," "1"))
p_values_all_df <- setNames(melt(p_values_all), c(".5",".75", "1"))
p_values_all_df <- as_tibble(p_values)
p_values_all_df <- as.data.frame(matrix(unlist(p_values_all), nrow = 3))
p_values_all_df <- setNames(melt(p_values_all), c(".5",".75", "1"))
p_values_all_df <- setNames(melt(p_values_all), c("upper_p_value","iteration", "p_value"))
p_values_all_df <- p_values_all_df %>%
mutate(upper_p_value = ifelse("1", "p < .5",
ifelse("2", "p < .75",
ifelse("3", "p < 1", NA))))
p_values_all_df <- p_values_all_df %>%
mutate(upper_p_value = ifelse(upper_p_value = "1", "p < .5",
ifelse(upper_p_value = "2", "p < .75",
ifelse(upper_p_value = "3", "p < 1", NA))))
p_values_all_df <- p_values_all_df %>%
mutate(upper_p_value = ifelse(upper_p_value == "1", "p < .5",
ifelse(upper_p_value == "2", "p < .75",
ifelse(upper_p_value == "3", "p < 1", NA))))
View(p_values_all_df
View(p_values_all_df
View(p_values_all_df)
p_values_all_df <- p_values_all_df %>%
mutate(upper_p_value = ifelse(upper_p_value == 1, "p < .5",
ifelse(upper_p_value == 2, "p < .75",
ifelse(upper_p_value == 3, "p < 1", NA))))
p_values_all_df <- p_values_all_df %>%
mutate(upper_p_value = ifelse(upper_p_value = 1, "p < .5",
ifelse(upper_p_value = 2, "p < .75",
ifelse(upper_p_value = 3, "p < 1", NA))))
p_values_all_df <- p_values_all_df %>%
mutate(upper_p_value = ifelse(1, "p < .5",
ifelse(2, "p < .75",
ifelse(3, "p < 1", NA))))
p_values_all_df <- setNames(melt(p_values_all), c("upper_p_value","iteration", "p_value"))
p_values_all_df <- p_values_all_df %>%
upper_p_value = as.factor(upper_p_value) %>%
mutate(upper_p_value = ifelse(upper_p_value == '1', "p < .5",
ifelse(upper_p_value == '2', "p < .75",
ifelse(upper_p_value == '3', "p < 1", NA))))
p_values_all_df <- setNames(melt(p_values_all), c("upper_p_value","iteration", "p_value"))
p_values_all_df <- p_values_all_df %>%
upper_p_value = as.numeric(upper_p_value)
library(tidyverse)
list <- c(.5, .75, 1) # create list of p-values
double_sample_v2 <- function (x, p) {
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_final <- test_sample_1$p.value
if(p_value_final < p & p_value_final > .05){
sample_2 <- sample_1 + rnorm(x)
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
}
return(p_value_final)
}
x <- 30
p_values_all <- replicate(10000, sapply(list, double_sample_v2, x=x))
p_values_all_df <- setNames(melt(p_values_all), c("upper_p_value","iteration", "p_value"))
library(reshape2)
p_values_all_df <- setNames(melt(p_values_all), c("upper_p_value","iteration", "p_value"))
p_values_all_df <- p_values_all_df %>%
upper_p_value = as.factor(upper_p_value) %>%
mutate(upper_p_value = ifelse(upper_p_value == '1', "p < .5",
ifelse(upper_p_value == '2', "p < .75",
ifelse(upper_p_value == '3', "p < 1", NA))))
p_values_all_df <- p_values_all_df %>%
mutate(upper_p_value = as.factor(upper_p_value)) %>%
mutate(upper_p_value = ifelse(upper_p_value == '1', "p < .5",
ifelse(upper_p_value == '2', "p < .75",
ifelse(upper_p_value == '3', "p < 1", NA))))
View(p_values_all_df)
p_values_all_df <- p_values_all_df %>%
mutate(significant = ifelse((p_value < .05), TRUE, FALSE))
proportions <- p_values_all_df %>%
group_by(upper_p_value) %>%
sum(significant == TRUE)/10000
proportions <- p_values_all_df %>%
group_by(upper_p_value) %>%
sum(significant == TRUE)/10000
p_values_all_df
proportions <- p_values_all_df %>%
group_by(upper_p_value) %>%
sum(significant == "TRUE")/10000
proportions <- p_values_all_df %>%
group_by(upper_p_value) %>%
sum('significant' == TRUE)/10000
proportions <- p_values_all_df %>%
group_by(upper_p_value) %>%
count(significant == TRUE)/10000
proportions <- p_values_all_df %>%
group_by(upper_p_value) %>%
length(significant[significant == TRUE])/10000
proportions <- p_values_all_df %>%
group_by(upper_p_value) %>%
sum(significant, na.rm = TRUE)/10000
p_values_all_df <- p_values_all_df %>%
mutate(significant = ifelse((p_value < .05), "TRUE", "FALSE")) # creates a column containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
p_values_all_df <- setNames(melt(p_values_all), c("upper_p_value","iteration", "p_value"))
p_values_all_df <- p_values_all_df %>%
mutate(upper_p_value = as.factor(upper_p_value)) %>%
mutate(upper_p_value = ifelse(upper_p_value == '1', "p < .5",
ifelse(upper_p_value == '2', "p < .75",
ifelse(upper_p_value == '3', "p < 1", NA))))
p_values_all_df <- p_values_all_df %>%
mutate(significant = ifelse((p_value < .05), "TRUE", "FALSE")) # creates a column containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportions <- p_values_all_df %>%
group_by(upper_p_value) %>%
sum(significant == "TRUE")/10000
proportions <- p_values_all_df %>%
group_by(upper_p_value) %>%
summarise(proportion_true = sum(significant == "TRUE")/10000)
View(proportions)
double_sample_loop_one_p <- function (x) {
sample_1 <- rnorm(x)
test_sample_1 <- t.test(sample_1)
p_value_final <- test_sample_1$p.value
while (p_value_final < .25 & p_value_final > .05){
sample_2 <- append(sample_1, rnorm(x))
test_sample_2 <- t.test(sample_2)
p_value_final <- test_sample_2$p.value
sample_1 <- sample_2
x <- length(sample_1)
}
return(p_value_final)
}
p_values_loop_one_p <- rep(NA, num_sim_v2) # creates a placeholder vector (where the output of the loop will be saved) with 10000 'NA' values
for (i in 1:num_sim_v2) {
sample <- rnorm(30)
p_value_v2 <- double.sample(sample)
p_values_loop_one_p[i] <- p_value_v2
}
p_values_lt05_one_p <- p_values_loop_one_p < 0.05 # creates a vector containing logical values of 'true' where the p-value is less than .05 and 'false' where the p-value is equal to or greater than .05
proportion_05_one_p <- sum(p_values_lt05_one_p == TRUE)/10000 # divides number of p-values that are less than .05 by the total number of p-values, which in this case is 10000
print(proportion_05_one_p) # prints the result
